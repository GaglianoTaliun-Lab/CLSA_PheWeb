'use strict';

// NOTE: `qval` means `-log10(pvalue)`.

const point_radius = 2.3;

function create_gwas_plot(variant_bins, unbinned_variants, container = '#manhattan_plot_container') {
    // empty the container
    //$(container).empty();
    reset_for_gwas_plot();

    // Order from weakest to strongest pvalue, so that the strongest variant will be on top (z-order) and easily hoverable
    // In the DOM, later siblings are displayed over top of (and occluding) earlier siblings.
    unbinned_variants = _.sortBy(unbinned_variants, function(d){return -d.pval});

    if (variant_bins.length && typeof variant_bins[0].qvals === "undefined") {
        // this json was generated by an old version of pheweb, so we'll manually fix things up.
        variant_bins.forEach(function(bin) {
            bin.qvals = bin.neglog10_pvals;
            bin.qval_extents = bin.neglog10_pval_extents;
        });
    }

    window.get_chrom_offsets = _.memoize(function() {
        var chrom_padding = 2e7;
        var chrom_extents = {};

        var update_chrom_extents = function(variant) {
            if (!(variant.chrom in chrom_extents)) {
                chrom_extents[variant.chrom] = [variant.pos, variant.pos];
            } else if (variant.pos > chrom_extents[variant.chrom][1]) {
                chrom_extents[variant.chrom][1] = variant.pos;
            } else if (variant.pos < chrom_extents[variant.chrom][0]) {
                chrom_extents[variant.chrom][0] = variant.pos;
            }
        }
        variant_bins.forEach(update_chrom_extents);
        unbinned_variants.forEach(update_chrom_extents);

        var chroms = _.sortBy(Object.keys(chrom_extents), parseInt);

        var chrom_genomic_start_positions = {};
        chrom_genomic_start_positions[chroms[0]] = 0;
        for (var i=1; i<chroms.length; i++) {
            chrom_genomic_start_positions[chroms[i]] = chrom_genomic_start_positions[chroms[i-1]] + chrom_extents[chroms[i-1]][1] - chrom_extents[chroms[i-1]][0] + chrom_padding;
        }

        // chrom_offsets are defined to be the numbers that make `get_genomic_position()` work.
        // ie, they leave a gap of `chrom_padding` between the last variant on one chromosome and the first on the next.
        var chrom_offsets = {};
        Object.keys(chrom_genomic_start_positions).forEach(function(chrom) {
            chrom_offsets[chrom] = chrom_genomic_start_positions[chrom] - chrom_extents[chrom][0];
        });

        return {
            chrom_extents: chrom_extents,
            chroms: chroms,
            chrom_genomic_start_positions: chrom_genomic_start_positions,
            chrom_offsets: chrom_offsets,
        };
    });

    window.get_genomic_position = function(variant) {
        var chrom_offsets = get_chrom_offsets().chrom_offsets;
        return chrom_offsets[variant.chrom] + variant.pos;
    }

    window.get_y_axis_config = function(max_data_qval, plot_height, includes_pval0) {

        var possible_ticks = [];
        if (max_data_qval <= 14) { possible_ticks = _.range(0, 14.1, 2); }
        else if (max_data_qval <= 28) { possible_ticks = _.range(0, 28.1, 4); }
        else if (max_data_qval <= 40) { possible_ticks = _.range(0, 40.1, 8); }
        else {
            possible_ticks = _.range(0, 20.1, 4);
            if (max_data_qval <= 70) { possible_ticks = possible_ticks.concat([30,40,50,60,70]); }
            else if (max_data_qval <= 120) { possible_ticks = possible_ticks.concat([40,60,80,100,120]); }
            else if (max_data_qval <= 220) { possible_ticks = possible_ticks.concat([60,100,140,180,220]); }
            else {
                var power_of_ten = Math.pow(10, Math.floor(Math.log10(max_data_qval)));
                var first_digit = max_data_qval / power_of_ten;
                var multipliers;
                if (first_digit <= 2) { multipliers = [0.5, 1, 1.5, 2]; }
                else if (first_digit <= 4) { multipliers = [1, 2, 3, 4]; }
                else { multipliers = [2, 4, 6, 8, 10]; }
                possible_ticks = possible_ticks.concat(multipliers.map(function(m) { return m * power_of_ten; }));
            }
        }
        // Include all ticks < qval.  Then also include the next tick.
        // That should mean we'll always have the largest tick >= the largest variant.
        var ticks = possible_ticks.filter(function(qval) { return qval < max_data_qval; });
        if (ticks.length < possible_ticks.length) { ticks.push(possible_ticks[ticks.length]); }

        // Use the largest tick for the top of our y-axis so that we'll have a tick nicely rendered right at the top.
        var max_plot_qval = ticks[ticks.length-1];
        // If we have any qval=inf (pval=0) variants, leave space for them.
        if (includes_pval0) { max_plot_qval *= 1.1 }
        var scale = d3.scaleLinear().clamp(true);
        if (max_plot_qval <= 40) {
            scale = scale
                .domain([max_plot_qval, 0])
                .range([0, plot_height]);
        } else {
            scale = scale
                .domain([max_plot_qval, 20, 0])
                .range([0, plot_height/2, plot_height]);
        }

        if (includes_pval0) { ticks.push(Infinity); }

        return {
            'scale': scale,
            'draw_break_at_20': !(max_plot_qval <= 40),
            'ticks': ticks,
        };
    }

    $(function() {
        var svg_width = $(container).width();
        var svg_height = 400; // shorten plot for manhattan a little bit compared to miami
        var plot_margin = {
            'left': 70,
            'right': 30,
            'top': 20,
            'bottom': 20,
        };
        window.plot_width = svg_width - plot_margin.left - plot_margin.right;
        var plot_height = svg_height - plot_margin.top - plot_margin.bottom; 

        var gwas_svg = d3.select('#gwas_svg')
            .attr("width", svg_width)
            .attr("height", svg_height)
            .style("display", "block")
            .style("margin", "auto");
        var gwas_plot = d3.select('#gwas_plot')
            .attr("transform", fmt("translate({0},{1})", plot_margin.left, plot_margin.top));
        // Significance Threshold line
        var significance_threshold = 5e-8;
        var significance_threshold_tooltip = d3.tip()
            .attr('class', 'd3-tip')
            .html('Significance Threshold: 5E-8')
            .offset([-8,0]);
        gwas_svg.call(significance_threshold_tooltip);

        var genomic_position_extent = (function() {
            var extent1 = d3.extent(variant_bins, get_genomic_position);
            var extent2 = d3.extent(unbinned_variants, get_genomic_position);
            return d3.extent(extent1.concat(extent2));
        })();

        window.x_scale = d3.scaleLinear()
            .domain(genomic_position_extent)
            .range([0, plot_width]);

        var includes_pval0 = _.any(unbinned_variants, function(variant) { return variant.pval === 0; });

        var highest_plot_qval = Math.max(
            -Math.log10(significance_threshold) + 0.5,
            (function() {
                var best_unbinned_qval = -Math.log10(d3.min(unbinned_variants, function(d) {
                    return (d.pval === 0) ? 1 : d.pval;
                }));
                if (best_unbinned_qval !== undefined) return best_unbinned_qval;
                return d3.max(variant_bins, function(bin) {
                    return d3.max(bin, _.property('qval'));
                });
            })());

        window.y_axis_config = get_y_axis_config(highest_plot_qval, plot_height, includes_pval0);
        window.y_scale = y_axis_config.scale;

        // TODO: draw a small y-axis-break at 20 if `y_axis_config.draw_break_at_20`
        window.y_axis = d3.axisLeft(y_scale)
            .tickFormat(d3.format("d"))
            .tickValues(y_axis_config.ticks)
        gwas_plot.append("g")
            .attr("class", "y axis")
            .attr('transform', 'translate(-8,0)') // avoid letting points spill through the y axis.
            .call(y_axis);

        if (includes_pval0) {
            var y_axis_break_inf_offset = y_scale(Infinity) + (y_scale(0)-y_scale(Infinity)) * 0.03
            gwas_plot.append('line')
                .attr('x1', -8-7).attr('x2', -8+7)
                .attr('y1', y_axis_break_inf_offset+6).attr('y2', y_axis_break_inf_offset-6)
                .attr('stroke', '#666').attr('stroke-width', '3px');
        }
        if (y_axis_config.draw_break_at_20) {
            var y_axis_break_20_offset = y_scale(20);
            gwas_plot.append('line')
                .attr('x1', -8-7).attr('x2', -8+7)
                .attr('y1', y_axis_break_20_offset+6).attr('y2', y_axis_break_20_offset-6)
                .attr('stroke', '#666').attr('stroke-width', '3px');
        }

        gwas_svg.append('text')
            .style('text-anchor', 'middle')
            .attr('transform', fmt('translate({0},{1})rotate(-90)',
                                   plot_margin.left*.4,
                                   plot_height/2 + plot_margin.top))
            .text('-log\u2081\u2080(p-value)'); // Unicode subscript "10"

        var chroms_and_midpoints = (function() {
            var v = get_chrom_offsets();
            return v.chroms.map(function(chrom) {
                return {
                    chrom: chrom,
                    midpoint: v.chrom_genomic_start_positions[chrom] + (v.chrom_extents[chrom][1] - v.chrom_extents[chrom][0]) / 2,
                };
            });
        })();

        var color_by_chrom_dim = d3.scaleOrdinal()
            .domain(get_chrom_offsets().chroms)
            .range(['rgb(221,221,237)', 'rgb(191,191,208)']);
        //colors to maybe sample from later:
        //.range(['rgb(120,120,186)', 'rgb(0,0,66)', 'rgb(44,150,220)', 'rgb(40,60,80)', 'rgb(33,127,188)', 'rgb(143,76,176)']);

        gwas_svg.selectAll('text.chrom_label')
            .data(chroms_and_midpoints)
            .enter()
            .append('text')
            .style('text-anchor', 'middle')
            .attr('transform', function(d) {
                return fmt('translate({0},{1})',
                           plot_margin.left + x_scale(d.midpoint),
                           plot_height + plot_margin.top + 20);
            })
            .text(function(d) {
                return d.chrom;
            })
            .style('fill', function(d) {
                return color_by_chrom_dim(d.chrom);
            });

        gwas_plot.insert('line', ":first-child")  /* prepend */
            .attr('x1', 0)
            .attr('x2', plot_width)
            .attr('y1', y_scale(-Math.log10(significance_threshold)))
            .attr('y2', y_scale(-Math.log10(significance_threshold)))
            .attr('stroke-width', '5px')
            .attr('stroke', 'lightgray')
            .attr('stroke-dasharray', '10,10')
            .on('mouseover', significance_threshold_tooltip.show)
            .on('mouseout', significance_threshold_tooltip.hide);

        // Points & labels
        var tooltip_template = _.template(window.model.tooltip_underscoretemplate);
        window.point_tooltip = d3.tip()
            .attr('class', 'd3-tip')
            .html(function(d) {
                return tooltip_template({d: d});
            })
            .offset([-6,0]);
        gwas_svg.call(point_tooltip);

        window.get_link_to_LZ = function(variant) {
            return fmt(window.model.urlprefix + '/region/{0}/{1}:{2}-{3}',
                       window.pheno,
                       variant.chrom,
                       Math.max(0, variant.pos - 200*1000),
                       variant.pos + 200*1000);
        }

        // TODO: if the label touches any circles or labels, skip it?
        var variants_to_label = _.sortBy(_.where(unbinned_variants, {peak: true}), _.property('pval'))
            .filter(function(d) { return d.pval < 5e-8; })
            .slice(0,7);
        var genenames = d3.select('#genenames')
            .selectAll('text.genenames')
            .data(variants_to_label)
            .enter()
            .append('text')
            .attr('class', 'genename_text')
            .style('font-style', 'italic')
            .attr('text-anchor', 'middle')
            .attr('transform', function(d) {
                return fmt('translate({0},{1})',
                           x_scale(get_genomic_position(d)),
                           y_scale(-Math.log10(d.pval))-5);
            })
            .text(function(d) {
                if (d.nearest_genes.split(',').length <= 2) {
                    return d.nearest_genes;
                } else {
                    return d.nearest_genes.split(',').slice(0,2).join(',')+',...';
                }
            });

        function pp2() {
        d3.select('#variant_points')
            .selectAll('a.variant_point')
            .data(unbinned_variants)
            .enter()
            .append('a')
            .attr('class', 'variant_point')
            .attr('xlink:href', get_link_to_LZ)
            .append('circle')
            .attr('id', function(d) {
                return fmt('variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt);
            })
            .attr('cx', function(d) {
                return x_scale(get_genomic_position(d));
            })
            .attr('cy', function(d) {
                return y_scale(-Math.log10(d.pval));
            })
            .attr('r', point_radius)
            .style('fill', function(d) {
                return color_by_chrom_dim(d.chrom);
            })
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                point_tooltip.show(d, this);
            })
            .on('mouseout', point_tooltip.hide);
        }
        pp2();

        function pp3() { // drawing the ~60k binned variant circles takes ~500ms.  The (far fewer) unbinned variants take much less time.
        var bins = d3.select('#variant_bins')
            .selectAll('g.bin')
            .data(variant_bins)
            .enter()
            .append('g')
            .attr('class', 'bin')
            .attr('data-index', function(d, i) { return i; }) // make parent index available from DOM
            .each(function(d) { //todo: do this in a forEach
                d.x = x_scale(get_genomic_position(d));
                d.color = color_by_chrom_dim(d.chrom);
            });
        bins.selectAll('circle.binned_variant_point')
            .data(_.property('qvals'))
            .enter()
            .append('circle')
            .attr('class', 'binned_variant_point')
            .attr('cx', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].x;
            })
            .attr('cy', function(qval) {
                return y_scale(qval);
            })
            .attr('r', point_radius)
            .style('fill', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].color;
            });
        bins.selectAll('circle.binned_variant_line')
            .data(_.property('qval_extents'))
            .enter()
            .append('line')
            .attr('class', 'binned_variant_line')
            .attr('x1', function(d, i) {
                const parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].x;
            })
            .attr('x2', function(d, i) {
                const parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].x;
            })
            .attr('y1', function(d) { return y_scale(d[0]); })
            .attr('y2', function(d) { return y_scale(d[1]); })
            .style('stroke', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].color;
            })
            .style('stroke-width', 4.6)
            .style('stroke-linecap', 'round');
        }
        pp3();

    });
}

function create_miami_plot(variant_bins1, variant_unbinned1, variant_bins2, variant_unbinned2, label1 = "Data 1", label2 = "Data 2", container = '#manhattan_plot_container'){

    reset_for_miami_plot();

    // Order from weakest to strongest pvalue, so that the strongest variant will be on top (z-order) and easily hoverable
    // In the DOM, later siblings are displayed over top of (and occluding) earlier siblings.
    variant_unbinned1 = _.sortBy(variant_unbinned1, function(d){return -d.pval});
    variant_unbinned2 = _.sortBy(variant_unbinned2, function(d){return -d.pval})
    
    if (variant_bins1 != null){

        if (variant_bins1.length && typeof variant_bins1[0].qvals === "undefined") {
            // this json was generated by an old version of pheweb, so we'll manually fix things up.
            variant_bins1.forEach(function(bin) {
                bin.qvals = bin.neglog10_pvals;
                bin.qval_extents = bin.neglog10_pval_extents;
            });
        }
        window.get_chrom_offsets_data1 = _.memoize(function() {
            var chrom_padding = 2e7;
            var chrom_extents = {};
    
            var update_chrom_extents = function(variant) {
                if (!(variant.chrom in chrom_extents)) {
                    chrom_extents[variant.chrom] = [variant.pos, variant.pos];
                } else if (variant.pos > chrom_extents[variant.chrom][1]) {
                    chrom_extents[variant.chrom][1] = variant.pos;
                } else if (variant.pos < chrom_extents[variant.chrom][0]) {
                    chrom_extents[variant.chrom][0] = variant.pos;
                }
            }
            variant_bins1.forEach(update_chrom_extents);
            variant_unbinned1.forEach(update_chrom_extents);
    
            var chroms = _.sortBy(Object.keys(chrom_extents), parseInt);
    
            var chrom_genomic_start_positions = {};
            chrom_genomic_start_positions[chroms[0]] = 0;
            for (var i=1; i<chroms.length; i++) {
                chrom_genomic_start_positions[chroms[i]] = chrom_genomic_start_positions[chroms[i-1]] + chrom_extents[chroms[i-1]][1] - chrom_extents[chroms[i-1]][0] + chrom_padding;
            }
    
            // chrom_offsets are defined to be the numbers that make `get_genomic_position()` work.
            // ie, they leave a gap of `chrom_padding` between the last variant on one chromosome and the first on the next.
            var chrom_offsets = {};
            Object.keys(chrom_genomic_start_positions).forEach(function(chrom) {
                chrom_offsets[chrom] = chrom_genomic_start_positions[chrom] - chrom_extents[chrom][0];
            });
    
            return {
                chrom_extents: chrom_extents,
                chroms: chroms,
                chrom_genomic_start_positions: chrom_genomic_start_positions,
                chrom_offsets: chrom_offsets,
            };
        });
    }

    if (variant_bins2 != null){
        if (variant_bins2.length && typeof variant_bins2[0].qvals === "undefined") {
            // this json was generated by an old version of pheweb, so we'll manually fix things up.
            variant_bins2.forEach(function(bin) {
                bin.qvals = bin.neglog10_pvals;
                bin.qval_extents = bin.neglog10_pval_extents;
            });
        }
    
        window.get_chrom_offsets_data2 = _.memoize(function() {
            var chrom_padding = 2e7;
            var chrom_extents = {};
    
            var update_chrom_extents = function(variant) {
                if (!(variant.chrom in chrom_extents)) {
                    chrom_extents[variant.chrom] = [variant.pos, variant.pos];
                } else if (variant.pos > chrom_extents[variant.chrom][1]) {
                    chrom_extents[variant.chrom][1] = variant.pos;
                } else if (variant.pos < chrom_extents[variant.chrom][0]) {
                    chrom_extents[variant.chrom][0] = variant.pos;
                }
            }
            variant_bins2.forEach(update_chrom_extents);
            variant_unbinned2.forEach(update_chrom_extents);
    
            var chroms = _.sortBy(Object.keys(chrom_extents), parseInt);
    
            var chrom_genomic_start_positions = {};
            chrom_genomic_start_positions[chroms[0]] = 0;
            for (var i=1; i<chroms.length; i++) {
                chrom_genomic_start_positions[chroms[i]] = chrom_genomic_start_positions[chroms[i-1]] + chrom_extents[chroms[i-1]][1] - chrom_extents[chroms[i-1]][0] + chrom_padding;
            }
    
            // chrom_offsets are defined to be the numbers that make `get_genomic_position()` work.
            // ie, they leave a gap of `chrom_padding` between the last variant on one chromosome and the first on the next.
            var chrom_offsets = {};
            Object.keys(chrom_genomic_start_positions).forEach(function(chrom) {
                chrom_offsets[chrom] = chrom_genomic_start_positions[chrom] - chrom_extents[chrom][0];
            });
    
            return {
                chrom_extents: chrom_extents,
                chroms: chroms,
                chrom_genomic_start_positions: chrom_genomic_start_positions,
                chrom_offsets: chrom_offsets,
            };
        });
    }

    window.get_genomic_position_data1 = function(variant) {
        var chrom_offsets = get_chrom_offsets_data1().chrom_offsets;
        return chrom_offsets[variant.chrom] + variant.pos;
    }

    window.get_genomic_position_data2 = function(variant) {
        var chrom_offsets = get_chrom_offsets_data2().chrom_offsets;
        return chrom_offsets[variant.chrom] + variant.pos;
    }

    function get_y_axis_config(max_data_qval, plot_height, includes_pval0, direction) {

        var possible_ticks = [];
        if (max_data_qval <= 14) { possible_ticks = _.range(0, 14.1, 2); }
        else if (max_data_qval <= 28) { possible_ticks = _.range(0, 28.1, 4); }
        else if (max_data_qval <= 40) { possible_ticks = _.range(0, 40.1, 8); }
        else {
            possible_ticks = _.range(0, 20.1, 4);
            if (max_data_qval <= 70) { possible_ticks = possible_ticks.concat([30,40,50,60,70]); }
            else if (max_data_qval <= 120) { possible_ticks = possible_ticks.concat([40,60,80,100,120]); }
            else if (max_data_qval <= 220) { possible_ticks = possible_ticks.concat([60,100,140,180,220]); }
            else {
                var power_of_ten = Math.pow(10, Math.floor(Math.log10(max_data_qval)));
                var first_digit = max_data_qval / power_of_ten;
                var multipliers;
                if (first_digit <= 2) { multipliers = [0.5, 1, 1.5, 2]; }
                else if (first_digit <= 4) { multipliers = [1, 2, 3, 4]; }
                else { multipliers = [2, 4, 6, 8, 10]; }
                possible_ticks = possible_ticks.concat(multipliers.map(function(m) { return m * power_of_ten; }));
            }
        }
        // Include all ticks < qval.  Then also include the next tick.
        // That should mean we'll always have the largest tick >= the largest variant.
        var ticks = possible_ticks.filter(function(qval) { return qval < max_data_qval; });
        if (ticks.length < possible_ticks.length) { ticks.push(possible_ticks[ticks.length]); }

        // Use the largest tick for the top of our y-axis so that we'll have a tick nicely rendered right at the top.
        var max_plot_qval = ticks[ticks.length-1];
        // If we have any qval=inf (pval=0) variants, leave space for them.
        if (includes_pval0) { max_plot_qval *= 1.1 }
        var scale = d3.scaleLinear().clamp(true);

        // TODO: fix the chromosomes numbers to actually go in the middle.
        if (direction === "upper"){
            if (max_plot_qval <= 40) {
                scale = scale
                    .domain([max_plot_qval, 0])
                    .range([0, plot_height/2]); // divide by 2 for miami
            } else {
                scale = scale
                    .domain([max_plot_qval, max_plot_qval / 7, 0])
                    .range([0, plot_height/4, plot_height/2 ]); // divide by x2 for miami
            }
        } else if (direction === "lower"){
            if (max_plot_qval <= 40) {
                scale = scale
                    .domain([max_plot_qval, max_plot_qval * -0.14])
                    .range([plot_height, plot_height/2]); // divide by 2 for miami
            } else {
                scale = scale
                    .domain([max_plot_qval, max_plot_qval / 7, 0])
                    .range([plot_height, plot_height/4 * 3, plot_height/2 + 29]); // divide by x2 for miami
            }
        }


        if (includes_pval0) { ticks.push(Infinity); }

        return {
            'scale': scale,
            'draw_break_at_20': !(max_plot_qval <= 40),
            'ticks': ticks,
        };
    }

    $(function() {
        var svg_width = $(container).width();
        var svg_height = 550;
        var plot_margin = {
            'left': 70,
            'right': 30,
            'top': 20,
            'bottom': 20, 
        };
        window.plot_width = svg_width - plot_margin.left - plot_margin.right;
        var plot_height = svg_height - plot_margin.top - plot_margin.bottom;

        // var miami_svg = d3.select(container).append("svg")
        //     .attr('id', 'miami_svg')
        //     .attr("width", svg_width)
        //     .attr("height", svg_height)
        //     .style("display", "block")
        //     .style("margin", "auto");
        // var miami_plot = miami_svg.append("g")
        //     .attr('id', 'miami_plot')
        //     .attr("transform", fmt("translate({0},{1})", plot_margin.left, plot_margin.top));

        var miami_svg = d3.select('#miami_svg')
            .attr("width", svg_width)
            .attr("height", svg_height)
            .style("display", "block")
            .style("margin", "auto");
        var miami_plot = d3.select('#miami_plot')
            .attr("transform", fmt("translate({0},{1})", plot_margin.left, plot_margin.top));

        // Significance Threshold line
        var significance_threshold = 5e-8;
        var significance_threshold_tooltip = d3.tip()
            .attr('class', 'd3-tip')
            .html('Significance Threshold: 5E-8')
            .offset([-8,0]);
        miami_svg.call(significance_threshold_tooltip);

        var color_by_chrom_dim = d3.scaleOrdinal()
            .domain(get_chrom_offsets_data1().chroms)
            .range(['rgb(221,221,237)', 'rgb(191,191,208)']);

        var chroms_and_midpoints = (function() {
            var v = get_chrom_offsets_data1();
            return v.chroms.map(function(chrom) {
                return {
                    chrom: chrom,
                    midpoint: v.chrom_genomic_start_positions[chrom] + (v.chrom_extents[chrom][1] - v.chrom_extents[chrom][0]) / 2,
                };
            });
        })();


        // default to data1 if its available.
        if (variant_bins1 != null){
            
            var genomic_position_extent = (function() { 
                var extent1 = d3.extent(variant_bins1, get_genomic_position_data1);
                var extent2 = d3.extent(variant_unbinned1, get_genomic_position_data1);
                return d3.extent(extent1.concat(extent2));
            })();
        }
        else if ( variant_bins2 != null){
            var genomic_position_extent = (function() { 
                var extent1 = d3.extent(variant_bins2, get_genomic_position_data2);
                var extent2 = d3.extent(variant_unbinned2, get_genomic_position_data2);
                return d3.extent(extent1.concat(extent2));
            })();
        }


        window.x_scale = d3.scaleLinear()
            .domain(genomic_position_extent)
            .range([0, plot_width]);

        var includes_pval0 = _.any(variant_unbinned1, function(variant) { return variant.pval === 0; }) ||  _.any(variant_unbinned2, function(variant) { return variant.pval === 0; });

        //for y axis stuff, it will differ between data1 and data2, so we need to seperate them
        var highest_plot_qval_data1 = Math.max(
            -Math.log10(significance_threshold) + 0.5,
            (function() {
                var best_unbinned_qval = -Math.log10(d3.min(variant_unbinned1, function(d) {
                    return (d.pval === 0) ? 1 : d.pval;
                }));
                if (best_unbinned_qval !== undefined) return best_unbinned_qval;
                return d3.max(variant_bins1, function(bin) {
                    return d3.max(bin, _.property('qval'));
                });
            })());
        
        var highest_plot_qval_data2 = Math.max(
            -Math.log10(significance_threshold) + 0.5,
            (function() {
                var best_unbinned_qval = -Math.log10(d3.min(variant_unbinned2, function(d) {
                    return (d.pval === 0) ? 1 : d.pval;
                }));
                if (best_unbinned_qval !== undefined) return best_unbinned_qval;
                return d3.max(variant_bins2, function(bin) {
                    return d3.max(bin, _.property('qval'));
                });
            })());

        if (!isNaN(highest_plot_qval_data2) && !isNaN(highest_plot_qval_data1)){
            var max_value = Math.max(highest_plot_qval_data2,highest_plot_qval_data1);
        } else if (isNaN(highest_plot_qval_data1)){
            var max_value = highest_plot_qval_data2
        } else if (isNaN(highest_plot_qval_data2)){
            var max_value = highest_plot_qval_data1
        }

        window.y_axis_config_data1 = get_y_axis_config(max_value, plot_height, includes_pval0, "upper");
        window.y_scale_data1 = y_axis_config_data1.scale;
        
        window.y_axis_config_data2 = get_y_axis_config(max_value, plot_height, includes_pval0, "lower");
        window.y_scale_data2 = y_axis_config_data2.scale;

        // TODO: draw a small y-axis-break at 20 if `y_axis_config.draw_break_at_20`

        var y_axis_data1 = d3.axisLeft(y_scale_data1)
            .tickFormat(d3.format("d"))
            .tickValues(y_axis_config_data1.ticks);
        miami_plot.append("g")
            .attr("class", "y axis")
            .attr('transform', 'translate(-8,0)') // avoid letting points spill through the y axis.
            .call(y_axis_data1);

        var y_axis_data2 = d3.axisLeft(y_scale_data2)
            .tickFormat(d3.format("d"))
            .tickValues(y_axis_config_data2.ticks);
        miami_plot.append("g")
            .attr("class", "y axis")
            .attr('transform', 'translate(-8,0)') // avoid letting points spill through the y axis.
            .call(y_axis_data2);

        if (includes_pval0) {
            var y_axis_break_inf_offset_data1 = y_scale_data1(Infinity) + (y_scale_data1(0)-y_scale_data1(Infinity)) * 0.03
            miami_plot.append('line')
                .attr('x1', -8-7).attr('x2', -8+7)
                .attr('y1', y_axis_break_inf_offset_data1+6).attr('y2', y_axis_break_inf_offset_data1-6)
                .attr('stroke', '#666').attr('stroke-width', '3px');

            var y_axis_break_inf_offset_data2 = y_scale_data2(Infinity) + (y_scale_data2(0)-y_scale_data2(Infinity)) * 0.03
            miami_plot.append('line')
                .attr('x1', -8-7).attr('x2', -8+7)
                .attr('y1', y_axis_break_inf_offset_data2+6).attr('y2', y_axis_break_inf_offset_data2-6)
                .attr('stroke', '#666').attr('stroke-width', '3px')
        }
        if (y_axis_config_data1.draw_break_at_20) {
            var y_axis_break_20_offset = y_scale_data1(20);
            miami_plot.append('line')
                .attr('x1', -8-7).attr('x2', -8+7)
                .attr('y1', y_axis_break_20_offset+6).attr('y2', y_axis_break_20_offset-6)
                .attr('stroke', '#666').attr('stroke-width', '3px');
        }
        if (y_axis_config_data2.draw_break_at_20) {
            var y_axis_break_20_offset = y_scale_data2(20);
            miami_plot.append('line')
                .attr('x1', -8-7).attr('x2', -8+7)
                .attr('y1', y_axis_break_20_offset+6).attr('y2', y_axis_break_20_offset-6)
                .attr('stroke', '#666').attr('stroke-width', '3px')
        }

        //side log10(p-value)
        miami_svg.append('text')
            .style('text-anchor', 'middle')
            .attr('transform', fmt('translate({0},{1})rotate(-90)',
                                    plot_margin.left*.4,
                                    plot_height/2 + plot_margin.top))
            .text('-log\u2081\u2080(p-value)'); // Unicode subscript "10"

        var stratification_label1 = label1.split(".")
        var stratification_label2 = label2.split(".")

        stratification_label1.shift()
        stratification_label2.shift()

        miami_svg.append('text')
            .style('text-anchor', 'middle')
            .attr('transform', fmt('translate({0},{1})rotate(-90)',
                                    plot_margin.left*.4,
                                    plot_height / 4 + plot_margin.top))
            .text(stratification_label1.join(" ")); 

        
        miami_svg.append('text')
            .style('text-anchor', 'middle')
            .attr('transform', fmt('translate({0},{1})rotate(-90)',
                                    plot_margin.left*.4,
                                    plot_height * 3 / 4 + plot_margin.top))
            .text(stratification_label2.join(" ")); 

        miami_svg.selectAll('text.chrom_label')
            .data(chroms_and_midpoints)
            .enter()
            .append('text')
            .style('text-anchor', 'middle')
            .attr('transform', function(d) {
                return fmt('translate({0},{1})',
                            plot_margin.left + x_scale(d.midpoint),
                            plot_height/2 + plot_margin.top + 20); // divide by two to have it midway
            })
            .text(function(d) {
                return d.chrom;
            })
            .style('fill', function(d) {
                return color_by_chrom_dim(d.chrom);
            });
        
        if (variant_bins1 != null){

            miami_plot.append('line')
            .attr('x1', 0)
            .attr('x2', plot_width)
            .attr('y1', y_scale_data1(-Math.log10(significance_threshold)))
            .attr('y2', y_scale_data1(-Math.log10(significance_threshold)))
            .attr('stroke-width', '5px')
            .attr('stroke', 'lightgray')
            .attr('stroke-dasharray', '10,10')
            .on('mouseover', significance_threshold_tooltip.show)
            .on('mouseout', significance_threshold_tooltip.hide);
        }

        if ( variant_bins2 != null){

            miami_plot.append('line')
                .attr('x1', 0)
                .attr('x2', plot_width)
                .attr('y1', y_scale_data2(-Math.log10(significance_threshold)))
                .attr('y2', y_scale_data2(-Math.log10(significance_threshold)))
                .attr('stroke-width', '5px')
                .attr('stroke', 'lightgray')
                .attr('stroke-dasharray', '10,10')
                .on('mouseover', significance_threshold_tooltip.show)
                .on('mouseout', significance_threshold_tooltip.hide)
        }

        // Points & labels
        var tooltip_template = _.template(
            window.model.tooltip_underscoretemplate +
                "<% if(_.has(d, 'num_significant_in_peak') && d.num_significant_in_peak>1) { %>#significant variants in peak: <%= d.num_significant_in_peak %><br><% } %>");
        window.point_tooltip = d3.tip()
            .attr('class', 'd3-tip')
            .html(function(d) {
                return tooltip_template({d: d});
            })
            .offset([-6,0]);
        miami_svg.call(point_tooltip);

        window.get_link_to_LZ_data1 = function(variant) {
            return fmt(window.model.urlprefix + '/region/{0}/{1}:{2}-{3}',
                        window.phenocode,
                        variant.chrom,
                        Math.max(0, variant.pos - 200*1000),
                        variant.pos + 200*1000);
        }
        window.get_link_to_LZ_data2 = function(variant) {
            return fmt(window.model.urlprefix + '/region/{0}/{1}:{2}-{3}',
                        window.phenocode,
                        variant.chrom,
                        Math.max(0, variant.pos - 200*1000),
                        variant.pos + 200*1000);
        }

        // TODO: if the label touches any circles or labels, skip it?
        var variants_to_label_data1 = _.sortBy(_.where(variant_unbinned1, {peak: true}), _.property('pval'))
            .filter(function(d) { return d.pval < 5e-8; })
            .slice(0,7);

        var variants_to_label_data2 = _.sortBy(_.where(variant_unbinned2, {peak: true}), _.property('pval'))
        .filter(function(d) { return d.pval < 5e-8; })
        .slice(0,7);

        var genenames_data1 = miami_plot.append('g')
            .attr('class', 'genenames_data1')
            .selectAll('text.genenames_data1')
            .data(variants_to_label_data1)
            .enter()
            .append('text')
            .attr('class', 'genename_text')
            .style('font-style', 'italic')
            .attr('text-anchor', 'middle')
            .attr('transform', function(d) {
                return fmt('translate({0},{1})',
                            x_scale(get_genomic_position_data1(d)),
                            y_scale_data1(-Math.log10(d.pval))-5);
            })
            .text(function(d) {
                if (d.nearest_genes.split(',').length <= 2) {
                    return d.nearest_genes;
                } else {
                    return d.nearest_genes.split(',').slice(0,2).join(',')+',...';
                }
            });
        
        var genenames_data2 = miami_plot.append('g')
            .attr('class', 'genenames_data2')
            .selectAll('text.genenames_data2')
            .data(variants_to_label_data2)
            .enter()
            .append('text')
            .attr('class', 'genename_text')
            .style('font-style', 'italic')
            .attr('text-anchor', 'middle')
            .attr('transform', function(d) {
                return fmt('translate({0},{1})',
                            x_scale(get_genomic_position_data2(d)),
                            y_scale_data2(-Math.log10(d.pval)) + 20);
            })
            .text(function(d) {
                if (d.nearest_genes.split(',').length <= 2) {
                    return d.nearest_genes;
                } else {
                    return d.nearest_genes.split(',').slice(0,2).join(',')+',...';
                }
            })

        //these are where clickable points will be appended to the plot
        function pp2(flip) {
            if(flip ){
                d3.select('#variant_points_lower')
                    .selectAll('a.variant_point')
                    .data(variant_unbinned2)
                    .enter()
                    .append('a')
                    .attr('class', 'variant_point')
                    .attr('xlink:href', get_link_to_LZ_data2)
                    .append('circle')
                    .attr('id', function(d) {
                        return fmt('variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt);
                    })
                    .attr('cx', function(d) {
                        return x_scale(get_genomic_position_data2(d));
                    })
                    .attr('cy', function(d) {
                        return y_scale_data2(-Math.log10(d.pval));
                    })
                    .attr('r', 2.3)
                    .style('fill', function(d) {
                        return color_by_chrom_dim(d.chrom);
                    })
                    .on('mouseover', function(d) {
                        //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                        point_tooltip.show(d, this);
                    })
                    .on('mouseout', point_tooltip.hide)
            } else if (!flip ) {
                d3.select('#variant_points_upper')
                    .selectAll('a.variant_point')
                    .data(variant_unbinned1)
                    .enter()
                    .append('a')
                    .attr('class', 'variant_point')
                    .attr('xlink:href', get_link_to_LZ_data1)
                    .append('circle')
                    .attr('id', function(d) {
                        return fmt('variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt);
                    })
                    .attr('cx', function(d) {
                        return x_scale(get_genomic_position_data1(d));
                    })
                    .attr('cy', function(d) {
                        return y_scale_data1(-Math.log10(d.pval));
                    })
                    .attr('r', 2.3)
                    .style('fill', function(d) {
                        return color_by_chrom_dim(d.chrom);
                    })
                    .on('mouseover', function(d) {
                        //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                        point_tooltip.show(d, this);
                    })
                    .on('mouseout', point_tooltip.hide); 
            }
        }
        if ( variant_bins1 != null){
            pp2(false);
        }
        if ( variant_bins2 != null){
            pp2(true);
        }

        //this is where the non-clickable points will be
        function pp3(flip) { // drawing the ~60k binned variant circles takes ~500ms.  The (far fewer) unbinned variants take much less time.
            if(flip ) {
                var bins = d3.select('#variant_bins_lower')
                    .selectAll('g.bin')
                    .data(variant_bins2)
                    .enter()
                    .append('g')
                    .attr('class', 'bin')
                    .attr('data-index', function(d, i) { return i; }) // make parent index available from DOM
                    .each(function(d) { //todo: do this in a forEach
                        d.x = x_scale(get_genomic_position_data2(d));
                        d.color = color_by_chrom_dim(d.chrom);
                    });
                bins.selectAll('circle.binned_variant_point')
                    .data(_.property('qvals'))
                    .enter()
                    .append('circle')
                    .attr('class', 'binned_variant_point')
                    .attr('cx', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins2[parent_i].x;
                    })
                    .attr('cy', function(qval) {
                        return y_scale_data2(qval);
                    })
                    .attr('r', 2.3)
                    .style('fill', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins2[parent_i].color;
                    })
                bins.selectAll('circle.binned_variant_line')
                    .data(_.property('qval_extents'))
                    .enter()
                    .append('line')
                    .attr('class', 'binned_variant_line')
                    .attr('x1', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins2[parent_i].x;
                    })
                    .attr('x2', function(d, i) {
                        const parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins2[parent_i].x;
                    })
                    .attr('y1', function(d) { return y_scale_data2(d[0]); })
                    .attr('y2', function(d) { return y_scale_data2(d[1]); })
                    .style('stroke', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins2[parent_i].color;
                    })
                    .style('stroke-width', 4.6)
                    .style('stroke-linecap', 'round')
            } else if (!flip ) {
                var bins = d3.select('#variant_bins_upper')
                    .selectAll('g.bin')
                    .data(variant_bins1)
                    .enter()
                    .append('g')
                    .attr('class', 'bin')
                    .attr('data-index', function(d, i) { return i; }) // make parent index available from DOM
                    .each(function(d) { //todo: do this in a forEach
                        d.x = x_scale(get_genomic_position_data1(d));
                        d.color = color_by_chrom_dim(d.chrom);
                    });
                bins.selectAll('circle.binned_variant_point')
                    .data(_.property('qvals'))
                    .enter()
                    .append('circle')
                    .attr('class', 'binned_variant_point')
                    .attr('cx', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins1[parent_i].x;
                    })
                    .attr('cy', function(qval) {
                        return y_scale_data1(qval);
                    })
                    .attr('r', 2.3)
                    .style('fill', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins1[parent_i].color;
                    });
                bins.selectAll('circle.binned_variant_line')
                    .data(_.property('qval_extents'))
                    .enter()
                    .append('line')
                    .attr('class', 'binned_variant_line')
                    .attr('x1', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins1[parent_i].x;
                    })
                    .attr('x2', function(d, i) {
                        const parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins1[parent_i].x;
                    })
                    .attr('y1', function(d) { return y_scale_data1(d[0]); })
                    .attr('y2', function(d) { return y_scale_data1(d[1]); })
                    .style('stroke', function(d, i) {
                        var parent_i = +this.parentNode.getAttribute('data-index');
                        return variant_bins1[parent_i].color;
                    })
                    .style('stroke-width', 4.6)
                    .style('stroke-linecap', 'round');
                }
        }
        if ( variant_bins1 != null){
            pp3(false);
        }
        if (variant_bins2 != null){
            pp3(true);
        }
    });
}

var manhattan_filter_view = {
    clear: function() {
        d3.select('#filtered_variant_points').selectAll('a.variant_point').data([]).exit().remove();
        d3.select('#filtered_variant_hover_rings').selectAll('a.variant_hover_ring').data([]).exit().remove();
        d3.select('#filtered_variant_bins').selectAll('g.bin').data([]).exit().remove();
        d3.select('#unchecked_variants_mask').attr('y', 0).attr('height', 0);
    },
    set_variants: function(variant_bins, unbinned_variants, weakest_pval) {
        d3.select('#unchecked_variants_mask')
        d3.select('#unchecked_variants_mask')
            .attr('transform', `translate(${-point_radius},0)`) // move left by the radius of the variant points (3px)
            .attr('width', window.plot_width+point_radius*2) // widen by 2x the radius of the variant points
            .attr('y', y_scale(-Math.log10(weakest_pval))+point_radius)
            .attr('height', Math.abs(y_scale(-Math.log10(weakest_pval))-y_scale(0)));

        // Order from weakest to strongest pvalue, so that the strongest variant will be on top (z-order) and easily hoverable
        // In the DOM, later siblings are displayed over top of (and occluding) earlier siblings.
        unbinned_variants = _.sortBy(unbinned_variants, function(d){return -d.pval});
        var gwas_plot = d3.select('#gwas_plot');
        var color_by_chrom = d3.scaleOrdinal()
            .domain(get_chrom_offsets().chroms)
            .range(['rgb(120,120,186)', 'rgb(0,0,66)']);

        var point_selection = d3.select('#filtered_variant_points')
            .selectAll('a.variant_point')
            .data(unbinned_variants)
        point_selection.exit().remove();
        point_selection.enter()
            .append('a')
            .attr('class', 'variant_point')
            .attr('xlink:href', get_link_to_LZ)
            .append('circle')
            .attr('id', function(d) {
                return fmt('filtered-variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt);
            })
            .attr('cx', function(d) {
                return x_scale(get_genomic_position(d));
            })
            .attr('cy', function(d) {
                return y_scale(-Math.log10(d.pval));
            })
            .attr('r', point_radius)
            .style('fill', function(d) {
                return color_by_chrom(d.chrom);
            })
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                point_tooltip.show(d, this);
            })
            .on('mouseout', point_tooltip.hide);

        var hover_ring_selection = d3.select('#filtered_variant_hover_rings')
            .selectAll('a.variant_hover_ring')
            .data(unbinned_variants)
        hover_ring_selection.exit().remove();
        hover_ring_selection.enter()
            .append('a')
            .attr('class', 'variant_hover_ring')
            .attr('xlink:href', get_link_to_LZ)
            .append('circle')
            .attr('cx', function(d) {
                return x_scale(get_genomic_position(d));
            })
            .attr('cy', function(d) {
                return y_scale(-Math.log10(d.pval));
            })
            .attr('r', 7)
            .style('opacity', 0)
            .style('stroke-width', 1) /* why? */
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                var target_node = document.getElementById(fmt('filtered-variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt));
                point_tooltip.show(d, target_node);
            })
            .on('mouseout', point_tooltip.hide);

        var bin_selection = d3.select('#filtered_variant_bins')
            .selectAll('g.bin')
            .data(variant_bins);
        bin_selection.exit().remove();
        var bins = bin_selection.enter()
            .append('g')
            .attr('class', 'bin')
            .attr('data-index', function(d, i) { return i; }) // make parent index available from DOM
            .each(function(d) { //todo: do this in a forEach
                d.x = x_scale(get_genomic_position(d));
                d.color = color_by_chrom(d.chrom);
            });
        bins.selectAll('circle.binned_variant_point')
            .data(_.property('qvals'))
            .enter()
            .append('circle')
            .attr('class', 'binned_variant_point')
            .attr('cx', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].x;
            })
            .attr('cy', function(qval) {
                return y_scale(qval);
            })
            .attr('r', point_radius)
            .style('fill', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].color;
            });
        bins.selectAll('line.binned_variant_line')
            .data(_.property('qval_extents'))
            .enter()
            .append('line')
            .attr('class', 'binned_variant_line')
            .attr('x1', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].x;
            })
            .attr('x2', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].x;
            })
            .attr('y1', function(d) { return y_scale(d[0]); })
            .attr('y2', function(d) { return y_scale(d[1]); })
            .style('stroke', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins[parent_i].color;
            })
            .style('stroke-width', 4.6)
            .style('stroke-linecap', 'round');
    }
};

var miami_filter_view = {

    clear: function() {
        d3.select('#filtered_variant_points_upper').selectAll('a.variant_point').data([]).exit().remove();
        d3.select('#filtered_variant_hover_rings_upper').selectAll('a.variant_hover_ring').data([]).exit().remove();
        d3.select('#filtered_variant_bins_upper').selectAll('g.bin').data([]).exit().remove();
        d3.select('#unchecked_variants_mask_upper').attr('y', 0).attr('height', 0);

        d3.select('#filtered_variant_points_lower').selectAll('a.variant_point').data([]).exit().remove();
        d3.select('#filtered_variant_hover_rings_lower').selectAll('a.variant_hover_ring').data([]).exit().remove();
        d3.select('#filtered_variant_bins_lower').selectAll('g.bin').data([]).exit().remove();
        d3.select('#unchecked_variants_mask_lower').attr('y', 0).attr('height', 0);

    },
    set_variants: function(variant_bins_upper, unbinned_variants_upper, weakest_pval_upper, variant_bins_lower, unbinned_variants_lower, weakest_pval_lower) {
        d3.select('#unchecked_variants_mask_upper')
        d3.select('#unchecked_variants_mask_upper')
            .attr('transform', `translate(${-point_radius},0)`) // move left by the radius of the variant points (3px)
            .attr('width', window.plot_width+point_radius*2) // widen by 2x the radius of the variant points
            .attr('y', y_scale_data1(-Math.log10(weakest_pval_upper))+point_radius)
            .attr('height', Math.abs(y_scale_data1(-Math.log10(weakest_pval_upper))-y_scale_data1(0)));

        d3.select('#unchecked_variants_mask_lower')
        d3.select('#unchecked_variants_mask_lower')
            .attr('transform', `translate(${-point_radius},0)`) // move left by the radius of the variant points (3px)
            .attr('width', window.plot_width+point_radius*2) // widen by 2x the radius of the variant points
            .attr('y', y_scale_data2(-Math.log10(weakest_pval_lower))-(point_radius*6)) // TODO: fix this
            .attr('height', Math.abs(y_scale_data2(-Math.log10(weakest_pval_lower))-y_scale_data2(0)));

        // Order from weakest to strongest pvalue, so that the strongest variant will be on top (z-order) and easily hoverable
        // In the DOM, later siblings are displayed over top of (and occluding) earlier siblings.
        unbinned_variants_upper = _.sortBy(unbinned_variants_upper, function(d){return -d.pval});
        unbinned_variants_lower = _.sortBy(unbinned_variants_lower, function(d){return -d.pval});

        var gwas_plot = d3.select('#miami_plot');
        var color_by_chrom = d3.scaleOrdinal()
            .domain(get_chrom_offsets_data1().chroms)
            .range(['rgb(120,120,186)', 'rgb(0,0,66)']);

        var point_selection_upper = d3.select('#filtered_variant_points_upper')
            .selectAll('a.variant_point_upper')
            .data(unbinned_variants_upper)

        point_selection_upper.exit().remove();
        point_selection_upper.enter()
            .append('a')
            .attr('class', 'variant_point')
            .attr('xlink:href', get_link_to_LZ_data1)
            .append('circle')
            .attr('id', function(d) {
                return fmt('filtered-variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt);
            })
            .attr('cx', function(d) {
                return x_scale(get_genomic_position_data1(d));
            })
            .attr('cy', function(d) {
                return y_scale_data1(-Math.log10(d.pval));
            })
            .attr('r', point_radius)
            .style('fill', function(d) {
                return color_by_chrom(d.chrom);
            })
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                point_tooltip.show(d, this);
            })
            .on('mouseout', point_tooltip.hide);

        var point_selection_lower = d3.select('#filtered_variant_points_lower')
            .selectAll('a.variant_point_lower')
            .data(unbinned_variants_lower)

        point_selection_lower.exit().remove();
        point_selection_lower.enter()
            .append('a')
            .attr('class', 'variant_point')
            .attr('xlink:href', get_link_to_LZ_data2)
            .append('circle')
            .attr('id', function(d) {
                return fmt('filtered-variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt);
            })
            .attr('cx', function(d) {
                return x_scale(get_genomic_position_data2(d));
            })
            .attr('cy', function(d) {
                return y_scale_data2(-Math.log10(d.pval));
            })
            .attr('r', point_radius)
            .style('fill', function(d) {
                return color_by_chrom(d.chrom);
            })
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                point_tooltip.show(d, this);
            })
            .on('mouseout', point_tooltip.hide);

        var hover_ring_selection_upper = d3.select('#filtered_variant_hover_rings_upper')
            .selectAll('a.variant_hover_ring_upper')
            .data(unbinned_variants_upper)
        var hover_ring_selection_lower = d3.select('#filtered_variant_hover_rings_lower')
            .selectAll('a.variant_hover_ring_lower')
            .data(unbinned_variants_lower)

        hover_ring_selection_upper.exit().remove();
        hover_ring_selection_upper.enter()
            .append('a')
            .attr('class', 'variant_hover_ring_lower')
            .attr('xlink:href', get_link_to_LZ_data1)
            .append('circle')
            .attr('cx', function(d) {
                return x_scale(get_genomic_position_data1(d));
            })
            .attr('cy', function(d) {
                return y_scale_data1(-Math.log10(d.pval));
            })
            .attr('r', 7)
            .style('opacity', 0)
            .style('stroke-width', 1) /* why? */
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                var target_node = document.getElementById(fmt('filtered-variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt));
                point_tooltip.show(d, target_node);
            })
            .on('mouseout', point_tooltip.hide);
        
        hover_ring_selection_lower.exit().remove();
        hover_ring_selection_lower.enter()
            .append('a')
            .attr('class', 'variant_hover_ring_lower')
            .attr('xlink:href', get_link_to_LZ_data2)
            .append('circle')
            .attr('cx', function(d) {
                return x_scale(get_genomic_position_data2(d));
            })
            .attr('cy', function(d) {
                return y_scale_data1(-Math.log10(d.pval));
            })
            .attr('r', 7)
            .style('opacity', 0)
            .style('stroke-width', 1) /* why? */
            .on('mouseover', function(d) {
                //Note: once a tooltip has been explicitly placed once, it must be explicitly placed forever after.
                var target_node = document.getElementById(fmt('filtered-variant-point-{0}-{1}-{2}-{3}', d.chrom, d.pos, d.ref, d.alt));
                point_tooltip.show(d, target_node);
            })
            .on('mouseout', point_tooltip.hide);

        var bin_selection_upper = d3.select('#filtered_variant_bins_upper')
            .selectAll('g.bin')
            .data(variant_bins_upper);
        bin_selection_upper.exit().remove();
        var bins = bin_selection_upper.enter()
            .append('g')
            .attr('class', 'bin')
            .attr('data-index', function(d, i) { return i; }) // make parent index available from DOM
            .each(function(d) { //todo: do this in a forEach
                d.x = x_scale(get_genomic_position_data1(d));
                d.color = color_by_chrom(d.chrom);
            });
        bins.selectAll('circle.binned_variant_point')
            .data(_.property('qvals'))
            .enter()
            .append('circle')
            .attr('class', 'binned_variant_point')
            .attr('cx', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_upper[parent_i].x;
            })
            .attr('cy', function(qval) {
                return y_scale_data1(qval);
            })
            .attr('r', point_radius)
            .style('fill', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_upper[parent_i].color;
            });
        bins.selectAll('line.binned_variant_line')
            .data(_.property('qval_extents'))
            .enter()
            .append('line')
            .attr('class', 'binned_variant_line')
            .attr('x1', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_upper[parent_i].x;
            })
            .attr('x2', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_upper[parent_i].x;
            })
            .attr('y1', function(d) { return y_scale_data1(d[0]); })
            .attr('y2', function(d) { return y_scale_data1(d[1]); })
            .style('stroke', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_upper[parent_i].color;
            })
            .style('stroke-width', 4.6)
            .style('stroke-linecap', 'round');

        var bin_selection_lower = d3.select('#filtered_variant_bins_lower')
            .selectAll('g.bin')
            .data(variant_bins_lower);

        bin_selection_lower.exit().remove();
        bins = bin_selection_lower.enter()
            .append('g')
            .attr('class', 'bin')
            .attr('data-index', function(d, i) { return i; }) // make parent index available from DOM
            .each(function(d) { //todo: do this in a forEach
                d.x = x_scale(get_genomic_position_data2(d));
                d.color = color_by_chrom(d.chrom);
            });
        bins.selectAll('circle.binned_variant_point')
            .data(_.property('qvals'))
            .enter()
            .append('circle')
            .attr('class', 'binned_variant_point')
            .attr('cx', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_lower[parent_i].x;
            })
            .attr('cy', function(qval) {
                return y_scale_data2(qval);
            })
            .attr('r', point_radius)
            .style('fill', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_lower[parent_i].color;
            });
        bins.selectAll('line.binned_variant_line')
            .data(_.property('qval_extents'))
            .enter()
            .append('line')
            .attr('class', 'binned_variant_line')
            .attr('x1', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_lower[parent_i].x;
            })
            .attr('x2', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_lower[parent_i].x;
            })
            .attr('y1', function(d) { return y_scale_data2(d[0]); })
            .attr('y2', function(d) { return y_scale_data2(d[1]); })
            .style('stroke', function(d, i) {
                var parent_i = +this.parentNode.getAttribute('data-index');
                return variant_bins_lower[parent_i].color;
            })
            .style('stroke-width', 4.6)
            .style('stroke-linecap', 'round');
    }
};

// var variant_table = {
//     clear: function() { populate_streamtable([]); },
//     set_variants: function(variants) { populate_streamtable(variants); },
// };

function refilter() {
    //variant_table.clear();
    var phenocode_with_stratifications1 = $('#dropdown-data1 input[type="radio"]:checked').val()
    var phenocode_with_stratifications2 = $('#dropdown-data2 input[type="radio"]:checked').val()

    let url_base;

    if (phenocode_with_stratifications2 == "None" ){
        manhattan_filter_view.clear();
        url_base = window.model.urlprefix + fmt("/api/manhattan-filtered/pheno/{0}.json?", phenocode_with_stratifications1);
    } else {
        miami_filter_view.clear();
        url_base = window.model.urlprefix + fmt("/api/miami-filtered/pheno/{0}.json/{1}.json?", phenocode_with_stratifications1, phenocode_with_stratifications2);
    }

    var get_params = [];
    get_params.push(fmt("min_maf={0}", $('#min_maf_input').val()));
    get_params.push(fmt("max_maf={0}", $('#max_maf_input').val()));
    var snp_indel_value = $('#snp_indel input:radio:checked').val();
    if (snp_indel_value=='snp' || snp_indel_value=='indel') {
        get_params.push(fmt("indel={0}", (snp_indel_value=='indel')?'true':'false'));
    }
    var csq_value = $('#csq input:radio:checked').val();
    if (csq_value=='lof' || csq_value=='nonsyn') {
        get_params.push(fmt("csq={0}", csq_value));
    }
    var url = url_base + get_params.join('&');

    console.log("refiltering with url: ", url)

    $.getJSON(url).done(function(data) {
        if(Array.isArray(data)){
            miami_filter_view.set_variants(data[0].variant_bins || [], data[0].unbinned_variants || [], data[0].weakest_pval || 1, data[1].variant_bins || [], data[1].unbinned_variants || [], data[1].weakest_pval || 1);
        } else {
            manhattan_filter_view.set_variants(data.variant_bins || [], data.unbinned_variants || [], data.weakest_pval || 1);
        }
        //variant_table.set_variants(data.unbinned_variants || []);
    });
}

$(function() {
    refilter();
    $('#min_maf_input, #max_maf_input').change(refilter);
    $('#filter_button').click(refilter);
});


// function populate_streamtable(variants) {

//     $(function() {
//         $('.stream_table_row').empty();
//         $('.stream_table_row').html($('<div class="col-xs-12"><table id="stream_table" class="table table-striped table-bordered"><thead><tr><th>Variant</th><th>Nearest Gene(s)</th><th>MAF</th><th>P-value</th></tr></thead><tbody></tbody></table></div>'));

//         // This is mostly copied from <https://michigangenomics.org/health_data.html>.
//         var data = _.sortBy(_.where(variants, {peak: true}), _.property('pval'));
//         var template = _.template($('#streamtable-template').html());
//         var view = function(variant) {
//             return template({v: variant});
//         };
//         var $found = $('#streamtable-found');
//         $found.text(data.length + " total loci");

//         var callbacks = {
//             pagination: function(summary){
//                 if ($.trim($('#search').val()).length > 0){
//                     $found.text(summary.total + " matching loci");
//                 } else {
//                     $found.text(data.length + " total loci");
//                 }
//             }
//         }

//         var options = {
//             view: view,
//             search_box: '#search',
//             per_page: 20,
//             callbacks: callbacks,
//             pagination: {
//                 span: 5,
//                 next_text: 'Next <span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span>',
//                 prev_text: '<span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span> Previous',
//                 per_page_select: false,
//                 per_page: 10
//             }
//         }

//         $('#stream_table').stream_table(options, data);

//     });
// }

var manhattan_results = {}

$(document).ready(function () {  

// manhattan and miami plot generation
if (window.model.stratified){

    var promises = phenocode_list.map(function(phenocode) {
        return $.getJSON(window.model.urlprefix + "/api/manhattan/pheno/" + phenocode + ".json");
    });
    
    $.when.apply($, promises).done(function() {
        var results = Array.prototype.slice.call(arguments);
        const data_div1 = document.getElementById('dropdown-content-data1');
        const data_div2 = document.getElementById('dropdown-content-data2');

        if (phenocode_list.length < 2){
            var processed_results = []
            processed_results.push(results)
        } else {
            var processed_results = results;
        }

        var sex_stratifications = []
        $('#cases-controls-samples').empty()
        processed_results.forEach((element, index) => {
            sex_stratifications.push(pheno_list[index][phenocode_list[index]].stratification['sex'].toLowerCase())
        });

        processed_results.forEach(function(result, i) {

            manhattan_results[phenocode_list[i]] = result[0]
            var data_label = " " + Object.values(pheno_list[i][phenocode_list[i]].stratification).join(", ")

            // populate case controls
            var pheno = pheno_list[i][phenocode_list[i]]

            let sampleText = "";
            if ('num_controls' in pheno && pheno['num_controls'] != ""){
                sampleText = pheno.num_cases +` cases, `+ pheno.num_controls +` controls`;
            } else if ('num_samples' in pheno && pheno['num_samples'] != "") {
                sampleText = pheno.num_samples +` samples`;
            }

            // if sex male there, will go to first, if female there, will default to second.
            // TODO: clean this up
            if ('sex' in pheno_list[i][phenocode_list[i]].stratification && sex_stratifications.length > 1) {
                var sex = pheno_list[i][phenocode_list[i]].stratification['sex'].toLowerCase()
                if (sex_stratifications.includes("male") && sex_stratifications.includes("female")){
                    if (sex == "male") {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText, true);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText);
                    } else if (sex == "female" ) {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText, true);
                    } else {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText);
                    }
                } else if (sex_stratifications.includes("male")){
                    if (sex == "male") {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText, true);
                    } else {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText, true);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText);
                    }
                } else if (sex_stratifications.includes("female")){
                    if (sex == "female") {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText, true);
                    } else {
                        var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText, true);
                        var radioButton2 = createRadioButton('data2', phenocode_list[i], data_label, sampleText);
                    }
                }

                data_div1.appendChild(radioButton1);
                data_div2.appendChild(radioButton2);

            } else {
                var radioButton1 = createRadioButton('data1', phenocode_list[i], data_label, sampleText, true);
                data_div1.appendChild(radioButton1);
            }

        });

        if (processed_results.length == 1){
            var radioButton2 = createRadioButton('data2', "None", "None", "", true);
            data_div2.appendChild(radioButton2);
        } else {
            var radioButton2 = createRadioButton('data2', "None", "None", "", false);
            data_div2.appendChild(radioButton2);
        }

    }).fail(function() {
        console.log("One or more requests failed.");
    });

} else {
    $.getJSON(window.model.urlprefix + "/api/manhattan/pheno/" + window.phenocode + ".json")
        .done(function(data) {
            window.debug.manhattan = data;
            create_gwas_plot(data.variant_bins, data.unbinned_variants);
        })
        .fail(function() {
        console.log("Manhattan XHR failed");
        });
    }

});

// Function to create radio buttons
function createRadioButton(name, value, text, sampleLabel = "", isChecked = false) {

    // Create the label element
    const label = document.createElement('label');
    if (sampleLabel != ""){
        text = text + " (" + sampleLabel + ")";
    }
    label.textContent = text;

    // Create the radio button element
    const radio = document.createElement('input');
    radio.type = 'radio';
    radio.name = name;
    radio.value = value;

    // Set the radio button to checked if isChecked is true
    if (isChecked) {
        radio.checked = true;
        updatePlot()
    }

    // Add an event listener to the radio button
    radio.addEventListener('change', function () {
        if (radio.checked) {
            updatePlot();
        }
    });


    // Append the radio button to the label
    label.prepend(radio);

    return label;
}

function updatePlot() {

        // Start a while loop to wait for the value to become defined
        function checkValue() {
            var checkbox_value1 = $('#dropdown-data1 input[type="radio"]:checked').val();
            var checkbox_value2 = $('#dropdown-data2 input[type="radio"]:checked').val();

            if (checkbox_value1 === undefined || checkbox_value2 === undefined)  {
                setTimeout(checkValue, 100); 
            } else if (checkbox_value1.length < 1 || checkbox_value2 < 1 ) {
                // If value is empty, wait and check again
                setTimeout(checkValue, 100);
            } else {
                // Once the value is defined, execute your code

                var checkbox_value1 = $('#dropdown-data1 input[type="radio"]:checked').val()
                var checkbox_value2 = $('#dropdown-data2 input[type="radio"]:checked').val()

                var checkbox_text1 = $('#dropdown-data1 input[type="radio"]:checked').closest('label').text();
                var checkbox_text2 = $('#dropdown-data2 input[type="radio"]:checked').closest('label').text();

                $('#button-data1').html(`${checkbox_text1}<span class="arrow-container"><span class="arrow-down"></span></span>`);
                $('#button-data2').html(`${checkbox_text2}<span class="arrow-container"><span class="arrow-down"></span></span>`);
        
                if (checkbox_value2 == "None" ){

                    create_gwas_plot(manhattan_results[checkbox_value1]['variant_bins'], manhattan_results[checkbox_value1]['unbinned_variants']);

                    //refilter the variants
                    refilter();
                } else {

                    var top_value = manhattan_results[checkbox_value1]
                    var bottom_value = manhattan_results[checkbox_value2]
                    create_miami_plot(top_value['variant_bins'], top_value['unbinned_variants'], bottom_value['variant_bins'], bottom_value['unbinned_variants'], checkbox_value1, checkbox_value2)
                    //refilter the variants
                    refilter();
                }          

            }
        }

        checkValue()
}

function reset_for_gwas_plot() {

    $('#manhattan_plot_container').empty();
    $('#manhattan_plot_container').append(`
<svg id="gwas_svg">  
    <defs>
      <pattern id="pattern-stripe" width="4" height="4" patternUnits="userSpaceOnUse" patternTransform="rotate(45)">
        <rect width="2" height="4" transform="translate(0,0)" fill="white"></rect>
      </pattern>
      <mask id="mask-stripe"><rect x="0" y="0" width="100%" height="100%" fill="url(#pattern-stripe)" /></mask>
    </defs>
    <g id="gwas_plot">
      <g id="genenames"></g>
      <g id="variant_hover_rings"></g>
      <g id="variant_points"></g>
      <g id="variant_bins"></g>
      <rect id="unchecked_variants_mask" style="fill:gray; mask:url(#mask-stripe)" transform="translate(-3,0)"/>
      <g id="filtered_variant_hover_rings"></g>
      <g id="filtered_variant_points"></g>
      <g id="filtered_variant_bins"></g>
    </g>
</svg>`)}

function reset_for_miami_plot() {

    $('#manhattan_plot_container').empty();
    $('#manhattan_plot_container').append(`
    <svg id="miami_svg">
    <defs>
      <pattern id="pattern-stripe_upper" width="4" height="4" patternUnits="userSpaceOnUse" patternTransform="rotate(45)">
        <rect width="2" height="4" transform="translate(0,0)" fill="white"></rect>
      </pattern>
      <mask id="mask-stripe_upper"><rect x="0" y="0" width="100%" height="100%" fill="url(#pattern-stripe)" /></mask>

      <pattern id="pattern-stripe_lower" width="4" height="4" patternUnits="userSpaceOnUse" patternTransform="rotate(45)">
        <rect width="2" height="4" transform="translate(0,0)" fill="white"></rect>
      </pattern>
      <mask id="mask-stripe_lower"><rect x="0" y="0" width="100%" height="100%" fill="url(#pattern-stripe)" /></mask>
    </defs>

    <g id="miami_plot">
      <g id="genenames_upper"></g>
      <g id="variant_hover_rings_upper"></g>
      <g id="variant_points_upper"></g>
      <g id="variant_bins_upper"></g>
      <rect id="unchecked_variants_mask_upper" style="fill:gray; mask:url(#mask-stripe)" transform="translate(-3,0)"/>
      <g id="filtered_variant_hover_rings_upper"></g>
      <g id="filtered_variant_points_upper"></g>
      <g id="filtered_variant_bins_upper"></g>
      
      <g id="genenames_lower"></g>
      <g id="variant_hover_rings_lower"></g>
      <g id="variant_points_lower"></g>
      <g id="variant_bins_lower"></g>
      <rect id="unchecked_variants_mask_lower" style="fill:gray; mask:url(#mask-stripe)" transform="translate(-3,0)"/>
      <g id="filtered_variant_hover_rings_lower"></g>
      <g id="filtered_variant_points_lower"></g>
      <g id="filtered_variant_bins_lower"></g>
    </g>
   
  </svg>`)}

